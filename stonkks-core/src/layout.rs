use sycamore::prelude::*;

/// Trait used to make a layout component for the apllication.
/// This component take as props the view generated by the current page and can render 
/// elements around it (for exemple nav bar, header, footer ect) to have a general layout 
/// for all pages defined at a single point.
pub trait Layout: Send + Sync + 'static {
    /// Function used to render the layout.
    fn render<'a, G: Html>(cx: Scope<'a>, page: View<G>) -> View<G>;
}

/// Internal trait used to implement the `Layout` trait in a dynamic dispatch way.
/// This trait is NOT meant to be implemented by hand, 
/// it is automaticaly implemented for all types implementing the `Layout` trait.
pub trait DynLayout: Send + Sync {
    fn render_client(&self, cx: Scope, page: View<DomNode>) -> View<DomNode>;
    fn render_server(&self, cx: Scope, page: View<SsrNode>) -> View<SsrNode>;
    fn hydrate(&self, cx: Scope, page: View<HydrateNode>) -> View<HydrateNode>;
}

impl<T: Layout> DynLayout for T {
    fn render_client(&self, cx: Scope, page: View<DomNode>) -> View<DomNode> {
        T::render(cx, page)
    }

    fn render_server(&self, cx: Scope, page: View<SsrNode>) -> View<SsrNode> {
        T::render(cx, page)
    }

    fn hydrate(&self, cx: Scope, page: View<HydrateNode>) -> View<HydrateNode> {
        T::render(cx, page)
    }
}
